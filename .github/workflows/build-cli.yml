# This is a **reuseable** workflow that builds the CLI for multiple platforms.
# It doesn't get triggered on its own. It gets used in multiple workflows:
#  - release.yml
#  - canary.yml
#
# Platform Build Strategy:
#  - Linux: Uses Ubuntu runner with cross-compilation
#  - macOS: Uses macOS runner with cross-compilation
#  - Windows: Uses Ubuntu runner with Docker cross-compilation (same as desktop build)
on:
  workflow_call:
    inputs:
      version:
        required: false
        default: ""
        type: string
      ref:
        type: string
        required: false
        default: ""

name: "Reusable workflow to build CLI"

jobs:
  build-cli:
    name: Build CLI
    runs-on: ${{ matrix.build-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            architecture: x86_64
            target-suffix: unknown-linux-gnu
            build-on: ubuntu-latest
            use-cross: true
          - os: ubuntu-latest
            architecture: aarch64
            target-suffix: unknown-linux-gnu
            build-on: ubuntu-latest
            use-cross: true

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Update version in Cargo.toml
        if: ${{ inputs.version != '' }}
        run: |
          sed -i.bak 's/^version = ".*"/version = "'${{ inputs.version }}'"/' Cargo.toml
          rm -f Cargo.toml.bak

      - name: Install cross
        if: matrix.use-cross
        run: source ./bin/activate-hermit && cargo install cross --git https://github.com/cross-rs/cross

      # Install Go for building temporal-service
      - name: Set up Go
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # pin@v5
        with:
          go-version: "1.21"

      - name: Build CLI (Linux/macOS)
        if: matrix.use-cross
        env:
          CROSS_NO_WARNINGS: 0
          RUST_LOG: debug
          RUST_BACKTRACE: 1
          CROSS_VERBOSE: 1
        run: |
          source ./bin/activate-hermit
          export TARGET="${{ matrix.architecture }}-${{ matrix.target-suffix }}"
          rustup target add "${TARGET}"
          echo "Building for target: ${TARGET}"
          echo "Rust toolchain info:"
          rustup show
          echo "Cross version:"
          cross --version

          echo "Building with explicit PROTOC path..."
          cross build --release --target ${TARGET} -p goose-cli -vv

      - name: Build temporal-service for target platform using build.sh script (Linux/macOS)
        if: matrix.use-cross
        run: |
          source ./bin/activate-hermit
          export TARGET="${{ matrix.architecture }}-${{ matrix.target-suffix }}"

          # Set Go cross-compilation variables based on target
          case "${TARGET}" in
            "x86_64-unknown-linux-gnu")
              export GOOS=linux
              export GOARCH=amd64
              BINARY_NAME="temporal-service"
              ;;
            "aarch64-unknown-linux-gnu")
              export GOOS=linux
              export GOARCH=arm64
              BINARY_NAME="temporal-service"
              ;;
            "x86_64-apple-darwin")
              export GOOS=darwin
              export GOARCH=amd64
              BINARY_NAME="temporal-service"
              ;;
            "aarch64-apple-darwin")
              export GOOS=darwin
              export GOARCH=arm64
              BINARY_NAME="temporal-service"
              ;;
            *)
              echo "Unsupported target: ${TARGET}"
              exit 1
              ;;
          esac

          echo "Building temporal-service for ${GOOS}/${GOARCH} using build.sh script..."
          cd temporal-service
          # Run build.sh with cross-compilation environment
          GOOS="${GOOS}" GOARCH="${GOARCH}" ./build.sh
          # Move the built binary to the expected location
          mv "${BINARY_NAME}" "../target/${TARGET}/release/${BINARY_NAME}"
          echo "temporal-service built successfully for ${TARGET}"

      - name: Download temporal CLI (Linux/macOS)
        if: matrix.use-cross
        run: |
          export TARGET="${{ matrix.architecture }}-${{ matrix.target-suffix }}"
          TEMPORAL_VERSION="1.3.0"

          # Set platform-specific download parameters
          case "${TARGET}" in
            "x86_64-unknown-linux-gnu")
              TEMPORAL_OS="linux"
              TEMPORAL_ARCH="amd64"
              TEMPORAL_EXT=""
              ;;
            "aarch64-unknown-linux-gnu")
              TEMPORAL_OS="linux"
              TEMPORAL_ARCH="arm64"
              TEMPORAL_EXT=""
              ;;
            "x86_64-apple-darwin")
              TEMPORAL_OS="darwin"
              TEMPORAL_ARCH="amd64"
              TEMPORAL_EXT=""
              ;;
            "aarch64-apple-darwin")
              TEMPORAL_OS="darwin"
              TEMPORAL_ARCH="arm64"
              TEMPORAL_EXT=""
              ;;
            *)
              echo "Unsupported target for temporal CLI: ${TARGET}"
              exit 1
              ;;
          esac

          echo "Downloading temporal CLI for ${TEMPORAL_OS}/${TEMPORAL_ARCH}..."
          TEMPORAL_FILE="temporal_cli_${TEMPORAL_VERSION}_${TEMPORAL_OS}_${TEMPORAL_ARCH}.tar.gz"
          curl -L "https://github.com/temporalio/cli/releases/download/v${TEMPORAL_VERSION}/${TEMPORAL_FILE}" -o "${TEMPORAL_FILE}"

          # Extract temporal CLI
          tar -xzf "${TEMPORAL_FILE}"
          chmod +x temporal${TEMPORAL_EXT}

          # Move to target directory
          mv temporal${TEMPORAL_EXT} "target/${TARGET}/release/temporal${TEMPORAL_EXT}"

          # Clean up
          rm -f "${TEMPORAL_FILE}"
          echo "temporal CLI downloaded successfully for ${TARGET}"

      - name: Package CLI with temporal-service (Linux/macOS)
        if: matrix.use-cross
        run: |
          source ./bin/activate-hermit
          export TARGET="${{ matrix.architecture }}-${{ matrix.target-suffix }}"

          # Create a directory for the package contents
          mkdir -p "target/${TARGET}/release/goose-package"

          # Copy binaries
          cp "target/${TARGET}/release/goose" "target/${TARGET}/release/goose-package/"
          cp "target/${TARGET}/release/temporal-service" "target/${TARGET}/release/goose-package/"
          cp "target/${TARGET}/release/temporal" "target/${TARGET}/release/goose-package/"

          # Create the tar archive with all binaries
          cd "target/${TARGET}/release"
          tar -cjf "goose-${TARGET}.tar.bz2" -C goose-package .
          echo "ARTIFACT=target/${TARGET}/release/goose-${TARGET}.tar.bz2" >> $GITHUB_ENV

      - name: Upload CLI artifact
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # pin@v4
        with:
          name: goose-${{ matrix.architecture }}-${{ matrix.target-suffix }}
          path: ${{ env.ARTIFACT }}
